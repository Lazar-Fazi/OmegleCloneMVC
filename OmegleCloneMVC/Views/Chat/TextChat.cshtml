@{
    ViewData["Title"] = "Text Chat";
}

<div class="text-chat-wrapper">
    <div id="textChatBox"></div>

    <div id="typingStatus"></div>

    <div class="input-row">
        <input type="text" id="interestInput" placeholder="Unesi interesovanja (npr: sport, film)..." />
        <button onclick="startTextChat()">Start</button>
    </div>

    <div class="input-row">
        <input type="text" id="textMessageInput" placeholder="Napiši poruku..." />
        <button onclick="sendTextMessage()">Send</button>
        <button onclick="nextTextPartner()">Next</button>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let chatConnection;
        let typingTimeout;

        async function startTextChat() {
            const interest = document.getElementById("interestInput").value;

            chatConnection = new signalR.HubConnectionBuilder()
                .withUrl("/textChatHub?interest=" + encodeURIComponent(interest))
                .build();

            chatConnection.on("ReceiveMessage", msg => {
                appendTextChat("Partner: " + msg);
            });

            chatConnection.on("ReceiveTyping", () => {
                document.getElementById("typingStatus").innerText = "Partner kuca...";
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    document.getElementById("typingStatus").innerText = "";
                }, 1500);
            });

            chatConnection.on("PartnerDisconnected", () => {
                appendTextChat("❌ Partner je napustio chat.");
            });

            await chatConnection.start();
            appendTextChat("🔎 Tražimo partnera...");
        }

        function sendTextMessage() {
            const msgInput = document.getElementById("textMessageInput");
            const msg = msgInput.value.trim();
            if (!msg) return;

            appendTextChat("Ti: " + msg);
            chatConnection.invoke("SendMessage", msg);
            msgInput.value = "";
            msgInput.focus();
        }

        function notifyTextTyping() {
            if (chatConnection && chatConnection.state === "Connected") {
                chatConnection.invoke("SendTyping");
            }
        }

        async function nextTextPartner() {
            if (chatConnection) await chatConnection.stop();
            document.getElementById("textChatBox").innerHTML = "";
            document.getElementById("textMessageInput").value = "";
            document.getElementById("interestInput").disabled = false;
        }

        function appendTextChat(msg) {
            const box = document.getElementById("textChatBox");
            const div = document.createElement("div");
            div.textContent = msg;
            box.appendChild(div);
            box.scrollTop = box.scrollHeight;
        }

        // Enter = send
        document.addEventListener("keydown", function (e) {
            const input = document.getElementById("textMessageInput");
            if (e.key === "Enter" && input === document.activeElement) {
                e.preventDefault();
                sendTextMessage();
            }
        });

    </script>
}

@section Styles {
    <style>
        .text-chat-wrapper {
            background: #000;
            color: #fff;
            padding: 30px;
            height: 100vh;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        #textChatBox {
            background: #111;
            flex: 1;
            overflow-y: auto;
            padding: 10px;
            border-radius: 6px;
            margin-bottom: 10px;
        }

        .input-row {
            display: flex;
            gap: 10px;
        }

            .input-row input[type="text"] {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 5px;
                background: #222;
                color: #fff;
            }

        button {
            padding: 10px 16px;
            background: #facc15;
            border: none;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
        }
    </style>
}
