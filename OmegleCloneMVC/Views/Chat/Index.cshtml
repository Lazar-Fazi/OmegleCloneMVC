@{
    ViewData["Title"] = "Omegle Video + Chat";
}

<div class="container">
    <!-- Leva strana: video -->
    <div class="video-column">
        <video id="remoteVideo" autoplay playsinline></video>
        <video id="localVideo" autoplay muted playsinline></video>
    </div>

    <!-- Desna strana: chat -->
    <div class="chat-column">

        <div id="loader" class="loader-container" style="display:none;">
            <div class="loader-spinner"></div>
            <div class="loader-text">Tražimo partnera...</div>
        </div>


        <!-- Pol -->
        <div id="genderSelect" class="gender-buttons">
            <label class="gender-option">
                <input type="radio" name="gender" value="Muško" />
                <span>Muško</span>
            </label>
            <label class="gender-option">
                <input type="radio" name="gender" value="Žensko" />
                <span>Žensko</span>
            </label>
        </div>
        <div id="onlineUsers" class="online-counter">👥 0 online</div>


        <!-- Chat box -->
        <div id="chatBox"></div>
        <div id="typingStatus"></div>

        <!-- Input -->
        <div class="input-wrapper">
            <input type="text" id="messageInput" placeholder="Write a message..." oninput="notifyTyping()" />

            <button onclick="sendMessage()">Send</button>
            <button onclick="next()">Next</button>
            <small style="color:#777; font-size: 12px;">(ESC za sledećeg partnera)</small>

            <button onclick="toggleMic()">Mute</button>
        </div>



    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let localStream, peerConnection, connection;
        let isMicMuted = false, isCameraOff = false;
        let typingTimeout;

        const config = { iceServers: [{ urls: "stun:stun.l.google.com:19302" }] };

        async function setupSignalR(userGender) {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/chatHub?gender=" + encodeURIComponent(userGender))
                .build();

        connection.on("PartnerFound", () => {
            appendChat("✅ Partner povezan.");

            // Sakrij loader ako je aktivan
            const loader = document.getElementById("loader");
            if (loader) loader.style.display = "none";

            const videoLoader = document.getElementById("videoLoader");
            if (videoLoader) videoLoader.style.display = "none";
        });






            connection.on("PartnerGender", gender => {
                const emoji = gender === "Muško" ? "👨" : gender === "Žensko" ? "👩" : "❓";
                appendChat(`${emoji} Partner je označen kao: ${gender}`);
            });

            connection.on("ReceiveMessage", msg => appendChat("👤 Partner: " + msg));

            connection.on("ReceiveTyping", () => {
                document.getElementById("typingStatus").innerText = "Partner kuca...";
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    document.getElementById("typingStatus").innerText = "";
                }, 1500);
            });

            connection.on("ReceiveOffer", async offer => {
                await createPeerConnection();
                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                localStream = await getMediaStream();
                attachLocalStream();

                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                connection.invoke("SendAnswer", answer);
            });

            connection.on("ReceiveAnswer", async answer => {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));

                const loader = document.getElementById("loader");
                if (loader) loader.style.display = "none";
            });


            connection.on("ReceiveIceCandidate", async candidate => {
                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            });

            connection.on("PartnerDisconnected", () => {
                appendChat("❌ Partner je napustio razgovor.");
                document.getElementById("remoteVideo").srcObject = null;
                if (peerConnection) peerConnection.close();
            });

            await connection.start();

                    connection.on("UpdateOnlineUsers", (count) => {
            document.getElementById("onlineUsers").textContent = `👥 ${count} online`;
        });

        }

        async function startVideoCall() {

            document.getElementById("loader").style.display = "flex";

            const gender = document.querySelector('input[name="gender"]:checked')?.value;
            if (!gender) return alert("Molimo izaberite pol pre početka.");

            if (!connection || connection.state !== "Connected") {
                await setupSignalR(gender);
            }

            await createPeerConnection();
            localStream = await getMediaStream();
            attachLocalStream();

            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            connection.invoke("SendOffer", offer);

            appendChat(`🧑 Ti si označen kao: ${gender}`);
        }

        async function createPeerConnection() {
            peerConnection = new RTCPeerConnection(config);

            peerConnection.ontrack = event => {
                document.getElementById("remoteVideo").srcObject = event.streams[0];
            };

            peerConnection.onicecandidate = event => {
                if (event.candidate) connection.invoke("SendIceCandidate", event.candidate);
            };
        }

        async function getMediaStream() {
            return await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        }

        function attachLocalStream() {
            document.getElementById("localVideo").srcObject = localStream;
            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
        }

        function sendMessage() {
            const msg = document.getElementById("messageInput").value;
            if (msg.trim()) {
                appendChat("🧑 Ti: " + msg);
                connection.invoke("SendMessage", msg);
                document.getElementById("messageInput").value = "";
            }
        }

        function notifyTyping() {
            if (connection?.state === "Connected") {
                connection.invoke("SendTyping");
            }
        }

        async function next() {
            if (connection) await connection.stop();
            if (peerConnection) peerConnection.close();
            if (localStream) localStream.getTracks().forEach(t => t.stop());

            document.getElementById("remoteVideo").srcObject = null;
            document.getElementById("localVideo").srcObject = null;
            document.getElementById("chatBox").innerHTML = "";
            document.getElementById("typingStatus").innerText = "";

            await startVideoCall();
        }

        function appendChat(text) {
            const box = document.getElementById("chatBox");
            const line = document.createElement("div");
            line.textContent = text;
            box.appendChild(line);
            box.scrollTop = box.scrollHeight;
        }

        function toggleMic() {
            if (!localStream) return;
            const mic = localStream.getAudioTracks()[0];
            mic.enabled = !mic.enabled;
            alert(mic.enabled ? "🎧 Mikrofon uključen" : "🔇 Mikrofon isključen");
        }

        function toggleCamera() {
            if (!localStream) return;
            const cam = localStream.getVideoTracks()[0];
            cam.enabled = !cam.enabled;
            alert(cam.enabled ? "📷 Kamera uključena" : "🚫 Kamera isključena");
        }
        // ENTER šalje poruku, ESC radi "Next"
        document.addEventListener("keydown", function (e) {
            const input = document.getElementById("messageInput");

            // ENTER šalje poruku
            if (e.key === "Enter" && input === document.activeElement) {
                e.preventDefault();
                sendMessage();
            }

            // ESC prekida i traži novog partnera
            if (e.key === "Escape") {
                e.preventDefault();
                next();
            }
        });


        // Fokusiraj se automatski na input polje kad se stranica učita
        window.onload = () => {
            document.getElementById("messageInput").focus();
        };



    </script>
}

@section Styles {
    <style>
        .container {
            max-width: 100vw;
            height: 100vh;
            display: flex;
            background: #000;
            padding: 0;
            margin: 0;
        }

        .video-column, .chat-column {
            width: 50%;
            padding: 20px;
            box-sizing: border-box;
        }

        video {
            width: 100%;
            margin-bottom: 10px;
            border-radius: 10px;
            background: #222;
        }

        #chatBox {
            flex: 1;
            background: #111;
            color: #f1f1f1;
            border-radius: 10px;
            padding: 10px;
            overflow-y: auto;
            height: 300px;
            margin-bottom: 10px;
        }

        .input-wrapper {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

        input[type="text"] {
            flex: 1;
            padding: 10px;
            background: #222;
            color: #fff;
            border: none;
            border-radius: 6px;
        }

        button {
            background: #facc15;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            font-weight: bold;
            cursor: pointer;
        }

        .gender-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .gender-option {
            display: flex;
            align-items: center;
            gap: 8px;
            background-color: #222;
            padding: 10px 14px;
            border-radius: 8px;
            cursor: pointer;
            color: #eee;
        }

            .gender-option input[type="radio"] {
                accent-color: #facc15;
                transform: scale(1.3);
            }
    </style>
}
